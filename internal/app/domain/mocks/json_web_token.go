// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"github.com/aasumitro/karlota/internal/app/domain"
	jwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"
)

// JSONWebToken is an autogenerated mock type for the JSONWebToken type
type JSONWebToken struct {
	mock.Mock
}

// Claim provides a mock function with given fields: user
func (_m *JSONWebToken) Claim(user *domain.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractFromHeader provides a mock function with given fields: token
func (_m *JSONWebToken) ExtractFromHeader(token string) string {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetExpirationHours provides a mock function with given fields:
func (_m *JSONWebToken) GetExpirationHours() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Verify provides a mock function with given fields: signedToken
func (_m *JSONWebToken) Verify(signedToken string) (*jwt.Token, error) {
	ret := _m.Called(signedToken)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
